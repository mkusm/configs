"""VUNDLE""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'marcopaganini/termschool-vim-theme'  "colorscheme
Plugin 'christoomey/vim-tmux-navigator'   "integrate vim with tmux navigation
Plugin 'tmhedberg/SimpylFold'							"python docstrings and import folding
Plugin 'ctrlpvim/ctrlp.vim'               "file finder
Plugin 'maralla/completor.vim'            "autocompletion
Plugin 'davidhalter/jedi-vim'             "python autocompletion
let g:jedi#completions_enabled = 0        "use only completor, jedi for jumps
"Plugin 'w0rp/ale'                         "python linting and syntax check
Plugin 'Vimjas/vim-python-pep8-indent'    "python indenting
Plugin 'jiangmiao/auto-pairs'             "close {, (, [ etc.

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on           " required
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
" Also don't do it when the mark is in the first line, that is the default
" position when opening a file.
autocmd BufReadPost *
  \ if line("'\"") > 1 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif

"""MAKE LIFE EASIER""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set history=50		           " keep 50 lines of command line history
set incsearch		             " do incremental searching
set ignorecase               " search is case insensitive

" move '~' and '.swp' files
" ~/.vim/backup/ dir needs to be created earlier!
set backupdir=~/.vim/backup//,.
set directory=~/.vim/backup//,.

" allow to have an unwritten buffer that's no longer visible
set hidden

" at least let yourself know what mode you're in
set showmode

" Enable enhanced command-line completion. Presumes you have compiled
" with +wildmenu. See :help 'wildmenu'
set wildmenu

"""VISUAL""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Less eye-straining colors
hi StatusLine ctermfg=darkgrey
hi StatusLineNC ctermfg=darkgrey
hi VertSplit ctermfg=darkgrey
hi ColorColumn ctermbg=darkgrey
hi Folded ctermbg=darkgrey

syntax enable                " enable syntax highlighting
let python_highlight_all = 1 " enable all Python syntax highlighting features
set number                   " show line numbers
set showmatch                " show the matching for [], {} and ()
set showcmd		               " display what you are writing as a command
set colorcolumn=80           " show 80th column
set ruler		                 " show the cursor position (line, column etc)
set hlsearch                 " highlight string matched in search
" set cursorline               " show a line under the cursor's current line

colorscheme termschool

"""INDENTATION"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set autoindent " indent when moving to the next line

autocmd Filetype vim setlocal
  \ expandtab
  \ tabstop=2
  \ shiftwidth=2

autocmd Filetype html setlocal
  \ expandtab
  \ tabstop=2
  \ shiftwidth=2

"autocmd Filetype python setlocal
"  \ expandtab
"  \ tabstop=4
"  \ shiftwidth=4
"  \ encoding=utf-8
""  \ foldlevel=99
""  \ foldmethod=indent
"
"" set python indents after parentheses to one-indent-width
"let g:pyindent_open_paren = '&sw'
"let g:pyindent_nested_paren = '&sw'
"let g:pyindent_continue = '&sw'

" Add the virtualenv's site-packages to vim path
py3 << EOF
import os.path
import sys
if 'VIRTUAL_ENV' in os.environ:
    project_base_dir = os.environ['VIRTUAL_ENV']
    sys.path.insert(0, project_base_dir)
EOF

"""MAPPINGS""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Swap ; and :
nnoremap ; :
nnoremap : ;

" Disable arrow movement, resize splits instead.
nnoremap <Up>    :resize +2<CR>
nnoremap <Down>  :resize -2<CR>
nnoremap <Left>  :vertical resize +2<CR>
nnoremap <Right> :vertical resize -2<CR>

"""LEADER""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Set leader
noremap <Space> <Nop>
let mapleader = "\<Space>"
